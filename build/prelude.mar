data Error.*: [] {
    Expect: [\Char]
}

;;data String: #[Char]

;; EXPECT

func expect_msg: (v: Bool, msg: \Char) -> () {
    if !v {
        throw(Error.Expect [msg])
    }
}

func expect: (v: Bool) -> () {
    expect_msg(v, "expect error")
}

;; STRING

func string_to_c: (s: \#[Char]) -> \Char {
    if s\[#s\-1] != '\0' {
        expect(#s\ < ##s\)
        set s\[#s\] = '\0'
    }
    return(`s->buf`)
}

test {
    var p1 = string_to_c(\#['o','i','\0'])
    expect(`strcmp(p1,"oi")` == 0)
    expect(`strlen(p1)` == 2)

    var s2: #[Char*3] = #['o','i']
    var p2 = string_to_c(\s2)
    expect(`strcmp(p2,"oi")` == 0)
    expect(`strlen(p2)` == 2)

    var x = catch :Error.Expect {
        string_to_c(\#['o','i'])
    }
    expect(x?Err)
}

func string_from_int: (v: Int) -> #[Char*32] {
    var ret: #[Char*32]
    `ret.cur = snprintf(ret.buf, 32, "%d", v)`
    return(ret)
}

test {
    var str = string_from_int(10)
    expect(#str == 2)
    expect(##str == 32)
    expect(str[0] == '1')
    expect(str[1] == '0')
    expect(str[2] == '\0')
}
