data Error.*: [] {
}

func ensure: (v: Bool) -> () {
    if !v {
        throw()
    }
}

func int_to_string: (v: Int) -> #[32*Char] {
    var ret: #[32*Char]
    `ret.cur = 1 + snprintf(ret.buf, 32, "%d", v)`
    return(ret)
}

test {
    var str = int_to_string(10)
    ensure(#str == 3)
    ensure(##str == 32)
    ensure(str[0] == '1')
    ensure(str[1] == '0')
    ensure(str[2] == '\0')
}

func string_empty: () -> #[1*Char] {
    return(#['\0'])
}

func string_cat_pointer: (s: \#[Char], p: \Char) -> () {
    ensure((##s\ > 0) && (##s\ > #s\))
    ensure(s\[#s\] == '\0')
    var n: Int = `strlen(p)`
    ensure(##s\ >= (#s\+1+n))
    loop i in n {
        set s\[#s\] = `p[i]`
        set #s\ = #s\ + 1
    }
    set s\[#s\] = '\0'
}

test {
    var str: #[10*Char] = string_empty()
    ensure((##str==10) && (#str==0) && (str[0]=='\0'))

    string_cat_pointer(\str, "xxx")
    ensure(`strcmp(str.buf, "xxx")` == 0)

    string_cat_pointer(\str, " ")
    string_cat_pointer(\str, "yyy")
    ensure(`strcmp(str.buf, "xxx yyy")` == 0)
}
